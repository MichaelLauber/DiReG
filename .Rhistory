TFs <- getTFs(cellType ,row)
TFs %in% uniqueTFs
TFs[!TFs %in% uniqueTFs]
row <- 1
TFs <- getTFs(cellType ,row)
TFs %in% uniqueTFs
TFs[TFs %in% uniqueTFs]
gsea_res <- runGsea("human", c("A"), TFs)
pattern <- "Melanocyte"
grep(pattern, gsea_res$pathway,v=T, ignore.case = T)
gsets <- grep(pattern, gsea_res$pathway,v=T, ignore.case = T)
get_pval_comparision(gsea_res, gsets)
melanocyte <- plot_enrichment("Melanocytes", "melanocyte")
plot_enrichment("Hepatocyte", "HEPATOCYTES", 2)
rstudioapi::translateLocalUrl("http://127.0.0.1:5511", T)
runGsea
plot_enrichment <- function(cellType, pattern, row=1, confidenceLevel= c("A")){
TFs <- getTFs(cellType ,row)
TFs %in% uniqueTFs
TFs[!TFs %in% uniqueTFs]
gsea_res <- runGsea("human", confidenceLevel, TFs)
gene_sets <- grep(pattern,gsea_res$pathway,v=T, ignore.case = T)
get_pval_comparision(gsea_res, gene_sets)
}
plot_enrichment("Hepatocyte", "HEPATOCYTES", c("A", "B"),  2)
plot_enrichment("Hepatocyte", "HEPATOCYTES",   2, c("A", "B"))
plot_enrichment("Hepatocyte", "HEPATOCYTES",   2, c("A", "B"))
plot_enrichment("Melanocytes", "melanocyte", confidenceLevel = c("A", "B"))
plot_enrichment("iPSCs", "stem_cell", confidenceLevel = c("A", "B"))
plot_enrichment("iPSCs", "stem_cell", row=6,confidenceLevel = c("A", "B"))
rstudioapi::translateLocalUrl("http://127.0.0.1:5511", T)
knitr::opts_chunk$set(echo = TRUE)
BiocManager::install('OmnipathR', version = 'devel')
BiocManager::install(version = '3.16')`
BiocManager::install(version = '3.16')
BiocManager::install('OmnipathR')
devtools::install_github('saezlab/OmnipathR')
install.packages("devtools")
install.packages("devtools")
devtools::install_github('saezlab/OmnipathR')
devtools::install_github('saezlab/OmnipathR')
OmnipathR::collectri()
rstudioapi::translateLocalUrl("http://127.0.0.1:5510", T)
utils::globalVariables("where")
OmnipathR::collectri()
library(tidyselect, lib.loc = "/usr/local/lib/R/site-library")
detach("package:tidyselect", unload = TRUE)
unload("tidyselect")
remove. packages("tidyselect")
remove.packages("tidyselect")
install.packages("tidyselect")
install.packages("tidyselect")
library(tidyselect)
detach("package:decoupleR", unload = TRUE)
library(tidyselect)
detach("package:dplyr", unload = TRUE)
library(tidyselect)
rm(`human_confidence-A_nrTFs-3_Perms-10000`)
rm(`human_confidence-A_nrTFs-3_Perms-100`)
rm(`human_confidence-A_nrTFs-5_Perms-100`)
rm(data)
OmnipathR::collectri()
library(tidyselect)
knitr::opts_chunk$set(echo = TRUE)
OmnipathR::collectri()
tri <- OmnipathR::collectri()
tri
tri$source_genesymbol %>% unique() %>% length()
library(dplyr)
tri$source_genesymbol %>% unique() %>% length()
tri$source_genesymbol %>% unique() %>% length()
dorothea_hs$source %>% unique() %>% length()
tri$source_genesymbol %>% unique() %>% length()
dorothea_hs$source %>% unique() %>% length()
tri
rstudioapi::translateLocalUrl("http://127.0.0.1:5510", T)
knitr::opts_chunk$set(echo = TRUE)
pattern <- "ipsc"
grep(pattern, gsea_res$pathway,v=T, ignore.case = T)
pattern <- "induced"
grep(pattern, gsea_res$pathway,v=T, ignore.case = T)
pattern <- "embryonic"
grep(pattern, gsea_res$pathway,v=T, ignore.case = T)
getwd()
rstudioapi::translateLocalUrl("http://127.0.0.1:5515", T)
library(ollamar)
test_connection()
list_models()
#test_connection()
#list_models()
resp <- generate("tinyllama", "tell me a 5-word story")
resp
resp
resp_txt <- resp_process(resp, "text")
resp_txt
resp_process(resp, "df")
resp_df <- resp_process(resp, "df")
resp_text <- resp_df$response
resp_text
rstudioapi::translateLocalUrl("http://127.0.0.1:5515", T)
#test_connection()
#list_models()
# resp <- generate("tinyllama", "tell me a 5-word story")
# resp_txt <- resp_process(resp, "text")
# resp_df <- resp_process(resp, "df")
# resp_text <- resp_df$response
test_connection()
con_test <- test_connection()
con_test
str(con_test)
con_test$status_code
dorothea_hs <- readRDS("data/dorothea_hs.rds")
dorothea_mm <- readRDS("data/dorothea_mm.rds")
dorothea_mm
split_result <- stringr::str_split("HNF1A HNF4A ONECUT1", "\\s+") %>%  unlist()
library(tidyverse)
library(dplyr)
split_result <- stringr::str_split("HNF1A HNF4A ONECUT1", "\\s+") %>%  unlist()
split_result
input <- split_result[split_result != ""]
input
gprofiler2::gconvert(query = input,
organism = organism(),
target="ENSG",
mthreshold = Inf,
filter_na = FALSE) %>%
mutate(output = case_when(
is.na(name) ~ input,
TRUE ~ name
)) %>%
pull(output)
gprofiler2::gconvert(query = input,
organism = "hsapiens",
target="ENSG",
mthreshold = Inf,
filter_na = FALSE) %>%
mutate(output = case_when(
is.na(name) ~ input,
TRUE ~ name
)) %>%
pull(output)
rstudioapi::translateLocalUrl("http://127.0.0.1:5515", T)
processed_input <- split_result[split_result != ""]
processed_input
gprofiler2::gconvert(query = processed_input,
organism = "hsapiens",
target="ENSG",
mthreshold = Inf,
filter_na = FALSE) %>%
mutate(output = case_when(
is.na(name) ~ processed_input,
TRUE ~ name
)) %>%
pull(output)
processed_input <- split_result[split_result != ""]
gprofiler2::gconvert(query = processed_input,
organism = "hsapiens",
target="ENSG",
mthreshold = Inf,
filter_na = FALSE) %>%
mutate(output = case_when(
is.na(name) ~ processed_input,
TRUE ~ name
)) %>%
pull(output)
gprofiler2::gconvert(query = processed_input,
organism = "hsapiens",
target="ENSG",
mthreshold = Inf,
filter_na = FALSE) %>%
dplyr::mutate(output = case_when(
is.na(name) ~ processed_input,
TRUE ~ name
)) %>%
dplyr::pull(output)
celltype1 <- "Bladder"
celltype2 <- "Liver"
counts <- gtexTPM %>%
dplyr::filter(!duplicated(genes)) %>%
dplyr::select(all_of(c(celltype1, celltype2))) %>%
as.matrix()
gtexTPM <- readRDS(file.path("data","gtexTPM.rds"))
tissues <- colnames(gtexTPM)[-c(1:2)]
counts <- gtexTPM %>%
dplyr::filter(!duplicated(genes)) %>%
dplyr::select(all_of(c(celltype1, celltype2))) %>%
as.matrix()
rownames(counts) <- gtexTPM %>%
dplyr::filter(!duplicated(genes)) %>%
dplyr::pull("genes")
res <- decoupleR::decouple(mat=counts, #remove after debugging!
net=data(),
.source='from',
.target='to',
args = list(
# wsum = list(.mor = "mor"),
# ulm = list(.mor = "mor"),
mlm = list(.mor = "mor")
),
minsize = 5) %>%
dplyr::mutate(score = round(score, 2)) %>%
dplyr::filter(statistic == "consensus") %>%
dplyr::select(-run_id)
res
rstudioapi::translateLocalUrl("http://127.0.0.1:5515", T)
user_prompt <- paste0("Do the overrepresentated genesets show specifity for:", "liver cells")
con_test$status_code
user_prompt
# Generate response
response <- generate("tinyllama", user_prompt, output = "text")
library(httr)
library(jsonlite)
# Set your API key
api_key <- "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"
# Define the API endpoint
url <- "https://api.openai.com/v1/chat/completions" # For GPT-4 or ChatGPT models
# Set up the request body
data <- toJSON(list(
model = "gpt-4o",  # Specify the model you want to use (e.g., "gpt-3.5-turbo" or "davinci")
messages = list(
list(role = "user", content = "First letter of the alphabet?")
),
max_tokens = 150
), auto_unbox = TRUE)
data
# Make the POST request
response <- POST(
url,
add_headers(
Authorization = paste("Bearer", api_key),
`Content-Type` = "application/json"
),
body = data,
encode = "json"
)
response
tatus_code(response) == 200
status_code(response)
# Parse the response
content <- content(response, as = "text", encoding = "UTF-8")
content
parsed_content <- fromJSON(content)
parsed_content
# Extract and print the response text
cat("Response from OpenAI:\n")
cat(parsed_content$choices[[1]]$message$content, "\n")
cat(parsed_content$choices[[1]]$message$content, "\n")
parsed_content
parsed_content$choices
cat(parsed_content$choices$message$content, "\n")
data <- toJSON(list(
model = "gpt-4o-mini",  # Specify the model you want to use (e.g., "gpt-3.5-turbo" or "davinci")
messages = list(
list(role = "user", content = "First letter of the alphabet?")
),
max_tokens = 150
), auto_unbox = TRUE)
# Make the POST request
response <- POST(
url,
add_headers(
Authorization = paste("Bearer", api_key),
`Content-Type` = "application/json"
),
body = data,
encode = "json"
)
# Check the response status
if (status_code(response) == 200) {
# Parse the response
content <- content(response, as = "text", encoding = "UTF-8")
parsed_content <- fromJSON(content)
# Extract and print the response text
cat("Response from OpenAI:\n")
cat(parsed_content$choices[[1]]$message$content, "\n")
cat(parsed_content$choices$message$content, "\n")
} else {
# Print an error message if the request fails
cat("Error: Unable to retrieve a response. Status code:", status_code(response), "\n")
}
# Parse the response
content <- content(response, as = "text", encoding = "UTF-8")
parsed_content <- fromJSON(content)
# Extract and print the response text
cat("Response from OpenAI:\n")
cat(parsed_content$choices[[1]]$message$content, "\n")
response
# Parse the response
content <- content(response, as = "text", encoding = "UTF-8")
parsed_content <- fromJSON(content)
parsed_content
cat(parsed_content$choices$message$content, "\n")
data <- toJSON(list(
model = "gpt-4o-mini",  # Specify the model you want to use (e.g., "gpt-3.5-turbo" or "davinci")
messages = list(
list(role = "user", content = "What transcription factors do you know?")
),
max_tokens = 150
), auto_unbox = TRUE)
# Make the POST request
response <- POST(
url,
add_headers(
Authorization = paste("Bearer", api_key),
`Content-Type` = "application/json"
),
body = data,
encode = "json"
)
# Check the response status
if (status_code(response) == 200) {
# Parse the response
content <- content(response, as = "text", encoding = "UTF-8")
parsed_content <- fromJSON(content)
# Extract and print the response text
cat("Response from OpenAI:\n")
#cat(parsed_content$choices[[1]]$message$content, "\n")
cat(parsed_content$choices$message$content, "\n")
} else {
# Print an error message if the request fails
cat("Error: Unable to retrieve a response. Status code:", status_code(response), "\n")
}
parsed_content
gtexTPM <-  vroom::vroom(file.path("data", "GTEx_Analysis_2017-06-05_v8_RNASeQCv1.1.9_gene_median_tpm.gct.gz"), delim = "\t", skip = 2)
gtexTPM
gtexTPM
gtexTPM <- gtexTPM %>%
rename(genes = Description )
gtex <- readRDS("/nfs/home/users/michaell2/R-Packages/DiReG/data/gtex_gene_tpm.rds")
gtex
View(gtex)
gtex[1,-1]
gtex[2,-1]
hist(gtex[2,-1])
hist(gtex[2,2:5])
gtex[2,2:5]
?decoupleR::decouple
rstudioapi::translateLocalUrl("http://127.0.0.1:5515", T)
toJSON
POST
content
fromJSON
status_code
add_headers
enrichData <- gprofiler2::gost(
query = "HNF1A HNF4A ONECUT1 ATF5 PROX1 CEBPA",
organism = "hsapiens",
ordered_query = FALSE,
multi_query = FALSE,
significant = TRUE,
exclude_iea = FALSE,
measure_underrepresentation = FALSE,
evcodes = FALSE,
user_threshold = 0.05,
correction_method = "g_SCS",
domain_scope = "annotated",
custom_bg = NULL,
numeric_ns = "",
sources = selectedSources,
as_short_link = FALSE
)
enrichData <- gprofiler2::gost(
query = "HNF1A HNF4A ONECUT1 ATF5 PROX1 CEBPA",
organism = "hsapiens",
ordered_query = FALSE,
multi_query = FALSE,
significant = TRUE,
exclude_iea = FALSE,
measure_underrepresentation = FALSE,
evcodes = FALSE,
user_threshold = 0.05,
correction_method = "g_SCS",
domain_scope = "annotated",
custom_bg = NULL,
numeric_ns = "",
#sources = selectedSources,
as_short_link = FALSE
)
enrichData
enrichData <- gprofiler2::gost(
query = "HNF1A HNF4A ONECUT1 ATF5 PROX1 CEBPA",
organism = "hsapiens",
ordered_query = FALSE,
multi_query = FALSE,
significant = F,
exclude_iea = FALSE,
measure_underrepresentation = FALSE,
evcodes = FALSE,
user_threshold = 0.05,
correction_method = "g_SCS",
domain_scope = "annotated",
custom_bg = NULL,
numeric_ns = "",
#sources = selectedSources,
as_short_link = FALSE
)
gostres <- gost(query = c("X:1000:1000000", "rs17396340", "GO:0005005", "ENSG00000156103", "NLRP1"),
organism = "hsapiens")
gostres <- gprofiler2::gost(query = c("X:1000:1000000", "rs17396340", "GO:0005005", "ENSG00000156103", "NLRP1"),
organism = "hsapiens")
gostres
gostres$result
gostres$result$term_name
gostres$result$term_name
as.vector(gostres$result$term_name)
paste0("Do the overrepresentated genesets show specifity for: liver cells", "These are the enriched genesets: ",gostres$result$term_name)
paste0("Do the overrepresentated genesets show specifity for: liver cells", "These are the enriched genesets: ", as.vector(gostres$result$term_name))
paste0("Do the overrepresentated genesets show specifity for: liver cells", "These are the enriched genesets: ", as.vector(gostres$result$term_name), collapse = ", ")
paste0("Do the overrepresentated genesets show specifity for: liver cells", "These are the enriched genesets: ", paste(as.vector(gostres$result$term_name), collapse = ", "))
paste0("Do the overrepresentated genesets show specifity for: liver cells", "These are the enriched genesets: ", paste(gostres$result$term_name, collapse = ", "))
response_to_display
response_to_display <- parsed_content$choices$message$content
content
response
# Set up the request body
data <- toJSON(list(
model = "gpt-4o",  # Specify the model you want to use (e.g., "gpt-3.5-turbo" or "davinci")
messages = list(
list(role = "user", content = "First letter of the alphabet?")
),
max_tokens = 150
), auto_unbox = TRUE)
# Make the POST request
response <- POST(
url,
add_headers(
Authorization = paste("Bearer", api_key),
`Content-Type` = "application/json"
),
body = data,
encode = "json"
)
# Set up the request body
data <- toJSON(list(
model = "gpt-4o",  # Specify the model you want to use (e.g., "gpt-3.5-turbo" or "davinci")
messages = list(
list(role = "user", content = "First letter of the alphabet?")
),
max_tokens = 150
), auto_unbox = TRUE)
data
# Make the POST request
response <- POST(
url,
add_headers(
Authorization = paste("Bearer", api_key),
`Content-Type` = "application/json"
),
body = data,
encode = "json"
)
# Set your API key
api_key <- "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"
# Define the API endpoint
url <- "https://api.openai.com/v1/chat/completions" # For GPT-4 or ChatGPT models
library(httr)
library(jsonlite)
# Make the POST request
response <- POST(
url,
add_headers(
Authorization = paste("Bearer", api_key),
`Content-Type` = "application/json"
),
body = data,
encode = "json"
)
response
response
# Parse the response
content <- content(response, as = "text", encoding = "UTF-8")
content
parsed_content <- fromJSON(content)
parsed_content
rstudioapi::translateLocalUrl("http://127.0.0.1:5515", T)
install.packages("reticulate")
library(httr)
# Define the user question
user_question <- "How can I differentiate Pancreatic duct cells into beta cells? Which transcription factors are necessary?"
# Send POST request to the API
response <- POST(
url = "http://localhost:8000/process_query",
body = list(question = user_question),
encode = "json"
)
# Parse the response
if (response$status_code == 200) {
result <- content(response)$result
cat("Final Result:\n")
cat(result)
} else {
cat("An error occurred. Status code:", response$status_code, "\n")
}
rstudioapi::translateLocalUrl("http://127.0.0.1:5515", T)
# Define the user question
user_question <- "How can I differentiate Pancreatic duct cells into beta cells? Which transcription factors are necessary?"
# Send POST request to the API
response <- POST(
url = "http://localhost:8000/process_query",
body = list(question = user_question),
encode = "json"
)
# Parse the response
if (response$status_code == 200) {
result <- content(response)$result
cat("Final Result:\n")
cat(result)
} else {
cat("An error occurred. Status code:", response$status_code, "\n")
}
rstudioapi::translateLocalUrl("http://127.0.0.1:5515", T)
rstudioapi::translateLocalUrl("http://127.0.0.1:5515", T)
